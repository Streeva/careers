// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostBase64DecodeHandlerFunc turns a function with the right signature into a post base64 decode handler
type PostBase64DecodeHandlerFunc func(PostBase64DecodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBase64DecodeHandlerFunc) Handle(params PostBase64DecodeParams) middleware.Responder {
	return fn(params)
}

// PostBase64DecodeHandler interface for that can handle valid post base64 decode params
type PostBase64DecodeHandler interface {
	Handle(PostBase64DecodeParams) middleware.Responder
}

// NewPostBase64Decode creates a new http.Handler for the post base64 decode operation
func NewPostBase64Decode(ctx *middleware.Context, handler PostBase64DecodeHandler) *PostBase64Decode {
	return &PostBase64Decode{Context: ctx, Handler: handler}
}

/*PostBase64Decode swagger:route POST /base64/decode postBase64Decode

base64 decode the supplied string

*/
type PostBase64Decode struct {
	Context *middleware.Context
	Handler PostBase64DecodeHandler
}

func (o *PostBase64Decode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBase64DecodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
